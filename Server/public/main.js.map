{"version":3,"sources":["./src/app/models/AuthorizationModel.ts","./src/app/services/auth.service.ts","./src/app/services/guard.service.ts","./src/app/services/api.service.ts","./src/app/components/login/login.component.html","./src/app/components/login/login.component.ts","./src/app/validators/CustomValidator.ts","./src/app/components/register/register.component.html","./src/app/components/register/register.component.ts","./src/app/components/dropmenu/dropmenu.component.ts","./src/app/components/dropmenu/dropmenu.component.html","./src/app/components/game/game.component.ts","./src/app/components/account/account.component.html","./src/app/components/game/game.component.html","./src/app/components/account/account.component.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["AuthorizationModel","jwtHelper","localStorage","getItem","authorization","token","this","setItem","removeItem","isTokenExpired","GuardService","auth","router","isAuthenticated","navigate","http","host","window","location","origin","tokenRoute","userRoute","availableRoute","encryptRoute","emailAddress","password","headers","body","email_address","post","toPromise","username","userUpdateModel","getAuthentication","decodeToken","patch","delete","get","hashCreateModel","formBuilder","api","error","form","group","email","required","pattern","login","value","setAuthentication","e","onSubmit","field","control","match","available","emailAvailable","usernameAvailable","minLength","passwordRetype","setValidators","createUser","faBars","faPlay","faUser","faSignOutAlt","isActive","clearAuthentication","onClickLogout","onToggle","faExpand","loadScript","url","document","script","createElement","innerHTML","src","async","defer","appendChild","display","nativeElement","requestFullscreen","onClickFullscreen","formNewUsername","newUsername","formNewPassword","newPassword","newPasswordRetype","formDelete","setUsername","user","getUser","encrypt","string","salt","password_salt","cypher","navigateByUrl","skipLocationChange","then","decodeURI","path","validPassword","passwordForNewUsername","updateUser","errorNewUsername","relogin","refresh","passwordForNewPassword","errorNewPassword","passwordForDelete","deleteUser","errorDelete","onSubmitNewUsername","onSubmitNewPassword","onSubmitDelete","routes","component","canActivate","redirectTo","AppRoutingModule","forRoot","onSameUrlNavigation","useHash","AppComponent","AppModule","config","tokenGetter","allowedDomains","bootstrapModule","catch","err","console","webpackEmptyAsyncContext","req","Promise","resolve","Error","code","keys","module","exports","id"],"mappings":"qOAAO,MAAMA,GCQN,MAAM,EAGX,YAAoBC,GAAA,KAAAA,YAEb,oBAGL,GAFcC,aAAaC,QAAQ,SAExB,CACT,IAAIC,EAAmC,CACrCC,MAAOH,aAAaC,QAAQ,UAG9BG,KAAKF,cAAgBA,EAGvB,OAAOE,KAAKF,cAGP,kBAAkBA,GACvBE,KAAKF,cAAgBA,EACrBF,aAAaK,QAAQ,QAASH,EAAcC,OAGvC,sBACLC,KAAKF,cAAgB,IAAIJ,EACzBE,aAAaM,WAAW,SAGnB,kBACL,MAAMH,EAAQH,aAAaC,QAAQ,SAEnC,GAAIE,EAAO,CACT,IAAID,EAAmC,CACrCC,MAAOH,aAAaC,QAAQ,UAK9B,OAFAG,KAAKF,cAAgBA,GAEbE,KAAKL,UAAUQ,eAAeJ,GAGxC,OAAO,G,sCA1CE,GAAW,Y,yBAAX,EAAW,QAAX,EAAW,qBAFV,SCEP,MAAMK,EAEX,YAAoBC,EAA0BC,GAA1B,KAAAD,OAA0B,KAAAC,SAE9C,cACE,QAAKN,KAAKK,KAAKE,oBACXP,KAAKM,OAAOE,SAAS,CAAC,OACf,I,sCAPFJ,GAAY,oB,yBAAZA,EAAY,QAAZA,EAAY,qBAFX,S,gBCaP,MAAM,EAOX,YACUK,EACAd,EACAU,GAFA,KAAAI,OACA,KAAAd,YACA,KAAAU,OATV,KAAAK,KAAc,GAAGC,OAAOC,SAASC,OACjC,KAAAC,WAAoB,aACpB,KAAAC,UAAmB,YACnB,KAAAC,eAAwB,sBACxB,KAAAC,aAAsB,sBAQtB,MAAMC,EAAqBC,GACzB,IAAIC,EAAU,IAAI,IAAY,CAC5B,eAAgB,qBAGdC,EAAO,CACTC,cAAeJ,EACfC,SAAUA,GAGZ,OAAOnB,KAAKS,KAAKc,KAAyB,GAAGvB,KAAKU,OAAOV,KAAKc,aAAcO,EAAM,CAAED,YAAWI,YAGjG,WAAWN,EAAqBO,EAAiBN,GAC/C,IAAIC,EAAU,IAAI,IAAY,CAC5B,eAAgB,qBAGdC,EAAO,CACTC,cAAeJ,EACfO,SAAUA,EACVN,SAAUA,GAGZ,OAAOnB,KAAKS,KAAKc,KAAuB,GAAGvB,KAAKU,OAAOV,KAAKe,YAAaM,EAAM,CAAED,YAAWI,YAG9F,WAAWE,GACT,IAAI5B,EAAgBE,KAAKK,KAAKsB,oBAE1BP,EAAU,IAAI,IAAY,CAC5B,eAAgB,mBAChB,cAAiB,UAAUtB,EAAcC,QAGvC0B,EAAWzB,KAAKL,UAAUiC,YAAY9B,EAAcC,OAAO0B,SAE/D,OAAOzB,KAAKS,KAAKoB,MAAwB,GAAG7B,KAAKU,OAAOV,KAAKe,aAAaU,IAAYC,EAAiB,CAAEN,YAAWI,YAGtH,aACE,IAAI1B,EAAgBE,KAAKK,KAAKsB,oBAE1BP,EAAU,IAAI,IAAY,CAC5B,eAAgB,mBAChB,cAAiB,UAAUtB,EAAcC,QAGvC0B,EAAWzB,KAAKL,UAAUiC,YAAY9B,EAAcC,OAAO0B,SAE/D,OAAOzB,KAAKS,KAAKqB,OAAyB,GAAG9B,KAAKU,OAAOV,KAAKe,aAAaU,IAAY,CAAEL,YAAWI,YAGtG,UACE,IAAI1B,EAAgBE,KAAKK,KAAKsB,oBAE1BP,EAAU,IAAI,IAAY,CAC5B,eAAgB,mBAChB,cAAiB,UAAUtB,EAAcC,QAGvC0B,EAAWzB,KAAKL,UAAUiC,YAAY9B,EAAcC,OAAO0B,SAE/D,OAAOzB,KAAKS,KAAKsB,IAAe,GAAG/B,KAAKU,OAAOV,KAAKe,aAAaU,IAAY,CAAEL,YAAWI,YAG5F,eAAeN,GACb,IAAIE,EAAU,IAAI,IAAY,CAC5B,eAAgB,qBAGdC,EAAO,CACTC,cAAeJ,GAGjB,OAAOlB,KAAKS,KAAKc,KAAqB,GAAGvB,KAAKU,OAAOV,KAAKgB,iBAAkBK,EAAM,CAAED,YAAWI,YAGjG,kBAAkBC,GAChB,IAAIL,EAAU,IAAI,IAAY,CAC5B,eAAgB,qBAGdC,EAAO,CACTI,SAAUA,GAGZ,OAAOzB,KAAKS,KAAKc,KAAqB,GAAGvB,KAAKU,OAAOV,KAAKgB,iBAAkBK,EAAM,CAAED,YAAWI,YAGjG,QAAQQ,GACN,IAAIZ,EAAU,IAAI,IAAY,CAC5B,eAAgB,qBAGlB,OAAOpB,KAAKS,KAAKc,KAAgB,GAAGvB,KAAKU,OAAOV,KAAKiB,eAAgBe,EAAiB,CAAEZ,YAAWI,a,sCA5G1F,GAAU,8B,yBAAV,EAAU,QAAV,EAAU,qBAFT,S,sCCVN,cAA+B,wBAAa,Q,sBAG5C,cAAuD,8BAAmB,Q,sBAG1E,cAA6D,sGAA2F,QCDzJ,MAAM,EAIX,YACUlB,EACA2B,EACAC,EACA7B,GAHA,KAAAC,SACA,KAAA2B,cACA,KAAAC,MACA,KAAA7B,OANV,KAAA8B,OAAiB,EASjB,WACEnC,KAAKoC,KAAOpC,KAAKiC,YAAYI,MAAM,CACjCC,MAAO,CAAC,GAAI,CACV,IAAWC,SACX,IAAWD,QAEbnB,SAAU,CAAC,GAAI,CACb,IAAWoB,SACX,IAAWC,QAAQ,mDAInBxC,KAAKK,KAAKE,mBACZP,KAAKM,OAAOE,SAAS,CAAC,UAI1B,YAAc,OAAOR,KAAKoC,KAAKL,IAAI,SACnC,eAAiB,OAAO/B,KAAKoC,KAAKL,IAAI,YAEhC,W,kDACJ,IACE,IAAI1B,QAAaL,KAAKkC,IAAIO,MAAMzC,KAAKsC,MAAMI,MAAO1C,KAAKmB,SAASuB,OAEhE1C,KAAKK,KAAKsC,kBAAkBtC,GAC5BL,KAAKM,OAAOE,SAAS,CAAC,UACtB,MAAMoC,GACN5C,KAAKmC,OAAQ,M,sCAtCN,GAAc,sC,uBAAd,EAAc,6eDZ3B,iBACI,aAAI,6CAAkC,OAC1C,OACA,kBACI,aAAI,gBAAK,OACT,aACA,iBACI,oBAEA,kBACA,qBAEA,mBACA,qBAEA,mBAA6D,+BAAS,EAAAU,aAAtE,OACJ,OACA,cACA,gBACI,mBACJ,OACJ,Q,MAfU,iCACgB,6BAGA,yEAGA,kFAEiB,0C,+DEXpC,MAAM,EACT,aAAaC,GACT,OAAQC,GACGD,EAAMJ,QAAUK,EAAQL,MAAO,CAACM,OAAO,GAAS,KAI/D,sBAAsBd,GAClB,OAAca,GAAuE,2CACjF,IAAIE,QAAkBf,EAAIgB,eAAeH,EAAQL,OAEjD,OAAKO,EAAUA,UAERA,EAAUA,UAAU3B,cAAgB,KAAO,CAAC4B,gBAAgB,GAFlC,OAMzC,yBAAyBhB,GACrB,OAAca,GAAuE,2CACjF,IAAIE,QAAkBf,EAAIiB,kBAAkBJ,EAAQL,OAEpD,OAAKO,EAAUA,UAERA,EAAUA,UAAUxB,SAAW,KAAO,CAAC0B,mBAAmB,GAFhC,Q,sBClBrC,cAA+B,2BAAgB,Q,sBAG/C,cAA8E,8BAAmB,Q,sBACjG,cAAuF,gCAAqB,Q,sBAG5G,cAA2F,4DAAiD,Q,sBAC5I,cAAmG,kCAAuB,Q,sBAG1H,cAA6D,sGAA2F,Q,sBAGxJ,cAAyE,0BAAe,QCTzF,MAAM,EAIX,YACU7C,EACA2B,EACAC,GAFA,KAAA5B,SACA,KAAA2B,cACA,KAAAC,MALV,KAAAC,OAAiB,EAQjB,WACEnC,KAAKoC,KAAOpC,KAAKiC,YAAYI,MAAM,CACjCC,MAAO,CAAC,GAAI,CACV,IAAWC,SACX,IAAWD,OACV,CACD,EAAgBY,eAAelD,KAAKkC,OAEtCT,SAAU,CAAC,GAAI,CACb,IAAWc,SACX,IAAWa,UAAU,IACpB,CACD,EAAgBD,kBAAkBnD,KAAKkC,OAEzCf,SAAU,CAAC,GAAI,CACb,IAAWoB,SACX,IAAWC,QAAQ,iDAErBa,eAAgB,CAAC,GAAI,CACnB,IAAWd,aAIfvC,KAAKqD,eAAeC,cAAc,CAAC,EAAgBN,MAAMhD,KAAKmB,YAGhE,YAAc,OAAOnB,KAAKoC,KAAKL,IAAI,SACnC,eAAiB,OAAO/B,KAAKoC,KAAKL,IAAI,YACtC,eAAiB,OAAO/B,KAAKoC,KAAKL,IAAI,YACtC,qBAAuB,OAAO/B,KAAKoC,KAAKL,IAAI,kBAEtC,W,kDACJ,WACsB/B,KAAKkC,IAAIqB,WAAWvD,KAAKsC,MAAMI,MAAO1C,KAAKyB,SAASiB,MAAO1C,KAAKmB,SAASuB,QAEjFP,MAAOnC,KAAKmC,OAAQ,EAC3BnC,KAAKM,OAAOE,SAAS,CAAC,MAC3B,MAAMoC,GACN5C,KAAKmC,OAAQ,M,sCAhDN,GAAiB,8B,uBAAjB,EAAiB,gsBDZ9B,iBACI,aAAI,6CAAkC,OAC1C,OACA,kBACI,aAAI,mBAAQ,OACZ,aACA,iBACI,oBAEA,kBACA,qBACA,qBAEA,mBACA,qBACA,qBAEA,mBACA,qBAEA,mBACA,qBAEA,mBAAsE,+BAAS,EAAAU,aAA/E,OACJ,OACA,cACA,gBACI,mBACJ,OACJ,Q,MAvBU,iCACgB,6BAGA,2HACA,oIAGA,8IACA,sJAGA,kFAGA,oGAE0B,0C,+EEZ7C,MAAM,EAOX,YAAoBvC,EAAwBD,GAAxB,KAAAC,SAAwB,KAAAD,OAN5C,KAAAmD,OAAS,IACT,KAAAC,OAAS,IACT,KAAAC,OAAS,IACT,KAAAC,aAAe,IACf,KAAAC,UAAmB,EAKnB,YAGA,YAKE,MAJa,CACX,YAAa5D,KAAK4D,UAMtB,WACE5D,KAAK4D,UAAY5D,KAAK4D,SAGxB,gBACE5D,KAAKK,KAAKwD,sBACV7D,KAAKM,OAAOE,SAAS,CAAC,O,sCA3Bb,GAAiB,oB,uBAAjB,EAAiB,yKCX9B,kBACI,cACI,mBAA2B,oBAAmC,oBAAS,OACvE,mBAA8B,oBAAmC,qBAAU,OAC3E,mBAAQ,+BAAS,EAAAsD,kBAAiB,oBAAyC,kBAAM,OACrF,OACA,oBAAQ,+BAAS,EAAAC,aAAY,qBAAmC,OACpE,Q,MAPO,8BAEqC,8BACG,8BACI,oCAET,gC,43CCEnC,MAAM,EAIX,cAFA,KAAAC,SAAW,IAIX,WACEhE,KAAKiE,WAAW,qBAGV,WAAWC,GACjB,MAAM7C,EAAwB8C,SAAS9C,KACjC+C,EAASD,SAASE,cAAc,UAEtCD,EAAOE,UAAY,GACnBF,EAAOG,IAAML,EACbE,EAAOI,OAAQ,EACfJ,EAAOK,OAAQ,EAEfpD,EAAKqD,YAAYN,GAGnB,oBACEpE,KAAK2E,QAAQC,cAAcC,qB,sBCvBvB,eAA0C,yBAAc,Q,sBAGxD,eAAoG,4DAAiD,Q,sBACrJ,eAA4G,kCAAuB,Q,sBAGnI,eAAyF,sGAA2F,Q,sBAMpL,eAA0C,yBAAc,Q,sBAGxD,eAAmE,sGAA2F,Q,sBAG9J,eAA+E,0BAAe,Q,sBAG9F,eAAyF,sGAA2F,Q,sBAMpL,eAAqC,yBAAc,Q,sBAGnD,eAA+E,sGAA2F,Q,sCD/BrK,I,uBAAA,EAAa,iD,GAAA,K,uJER1B,uBACA,kBACI,wBACI,+DACJ,OACA,mBAAQ,+BAAS,EAAAC,sBAAqB,oBAAqC,qBAAU,OACzF,Q,MADmD,kC,okBCS5C,MAAM,EASX,YACUxE,EACAM,EACAqB,EACAC,EACA7B,GAJA,KAAAC,SACA,KAAAM,WACA,KAAAqB,cACA,KAAAC,MACA,KAAA7B,OAGV,WACEL,KAAK+E,gBAAkB/E,KAAKiC,YAAYI,MAAM,CAC5C2C,YAAa,CAAC,GAAI,CAChB,IAAWzC,SACX,IAAWa,UAAU,IACpB,CACD,EAAgBD,kBAAkBnD,KAAKkC,OAEzCf,SAAU,CAAC,GAAI,CACb,IAAWoB,SACX,IAAWC,QAAQ,mDAIvBxC,KAAKiF,gBAAkBjF,KAAKiC,YAAYI,MAAM,CAC5ClB,SAAU,CAAC,GAAI,CACb,IAAWoB,SACX,IAAWC,QAAQ,iDAErB0C,YAAa,CAAC,GAAI,CAChB,IAAW3C,SACX,IAAWC,QAAQ,iDAErB2C,kBAAmB,CAAC,GAAI,CACtB,IAAW5C,SACX,IAAWC,QAAQ,mDAIvBxC,KAAKmF,kBAAkB7B,cAAc,CAAC,EAAgBN,MAAMhD,KAAKkF,eAEjElF,KAAKoF,WAAapF,KAAKiC,YAAYI,MAAM,CACvClB,SAAU,CAAC,GAAI,CACb,IAAWoB,SACX,IAAWC,QAAQ,mDAIvBxC,KAAKqF,cAGD,c,kDACJ,IAAIC,QAAatF,KAAKkC,IAAIqD,UAC1BvF,KAAKyB,SAAW6D,EAAK7D,WAGvB,kBAAoB,OAAOzB,KAAK+E,gBAAgBhD,IAAI,eACpD,kBAAoB,OAAO/B,KAAKiF,gBAAgBlD,IAAI,eACpD,wBAA0B,OAAO/B,KAAKiF,gBAAgBlD,IAAI,qBAE1D,6BAA+B,OAAO/B,KAAK+E,gBAAgBhD,IAAI,YAC/D,6BAA+B,OAAO/B,KAAKiF,gBAAgBlD,IAAI,YAC/D,wBAA0B,OAAO/B,KAAKoF,WAAWrD,IAAI,YAEvC,cAAcZ,G,kDAC1B,IACE,IAAImE,QAAatF,KAAKkC,IAAIqD,UAG1B,aAFiBvF,KAAKkC,IAAIsD,QAAQ,CAACC,OAAQtE,EAAUuE,KAAMJ,EAAKK,iBAEpDC,SAAWN,EAAKnE,SAC5B,MAAMyB,GACN,OAAO,KAIG,QAAQN,EAAenB,G,kDACnC,IAAId,QAAaL,KAAKkC,IAAIO,MAAMH,EAAOnB,GACvCnB,KAAKK,KAAKsC,kBAAkBtC,KAGtB,UACNL,KAAKM,OAAOuF,cAAc,WAAY,CAAEC,oBAAoB,IAAQC,KAAK,KACvE/F,KAAKM,OAAOE,SAAS,CAACwF,UAAUhG,KAAKY,SAASqF,YAI5C,sB,kDAEJ,SAD0BjG,KAAKkG,cAAclG,KAAKmG,uBAAuBzD,OAMzE,IACE,IAAI4C,QAAatF,KAAKkC,IAAIqD,iBACNvF,KAAKkC,IAAIkE,WAAW,CAACpB,YAAahF,KAAKgF,YAAYtC,SAE1DP,MAIXnC,KAAKqG,kBAAmB,GAHxBrG,KAAKsG,QAAQhB,EAAKhE,cAAetB,KAAKmG,uBAAuBzD,OAC7D1C,KAAKuG,WAIP,MAAM3D,GACN5C,KAAKqG,kBAAmB,OAfxBrG,KAAKqG,kBAAmB,IAmBtB,sB,kDAEJ,SAD0BrG,KAAKkG,cAAclG,KAAKwG,uBAAuB9D,OAMzE,IACE,IAAI4C,QAAatF,KAAKkC,IAAIqD,iBACNvF,KAAKkC,IAAIkE,WAAW,CAAClB,YAAalF,KAAKkF,YAAYxC,SAE1DP,MAIXnC,KAAKyG,kBAAmB,GAHxBzG,KAAKsG,QAAQhB,EAAKhE,cAAetB,KAAKkF,YAAYxC,OAClD1C,KAAKuG,WAIP,MAAM3D,GACN5C,KAAKyG,kBAAmB,OAfxBzG,KAAKyG,kBAAmB,IAmBtB,iB,kDAEJ,SAD0BzG,KAAKkG,cAAclG,KAAK0G,kBAAkBhE,OAMpE,WACsB1C,KAAKkC,IAAIyE,cAEhBxE,MAIXnC,KAAK4G,aAAc,GAHnB5G,KAAKK,KAAKwD,sBACV7D,KAAKM,OAAOE,SAAS,CAAC,OAIxB,MAAMoC,GACN5C,KAAK4G,aAAc,OAdnB5G,KAAK4G,aAAc,K,sCA5IZ,GAAgB,gD,uBAAhB,EAAgB,s/BFd7B,uBACA,iBACI,aAAI,6CAAkC,OAC1C,OACA,kBACI,aAAI,QAAsB,OAC1B,aACA,iBACI,oBAEA,mBACA,qBACA,qBAEA,mBACA,qBAEA,mBAAkF,+BAAS,EAAAC,wBAA3F,OACJ,OACA,cACA,kBACI,qBAEA,mBACA,qBAEA,mBACA,qBAEA,mBACA,qBAEA,mBAAkF,+BAAS,EAAAC,wBAA3F,OACJ,OACA,cACA,kBACI,qBAEA,mBACA,qBAEA,oBAA4E,+BAAS,EAAAC,mBAArF,OACJ,OACJ,Q,MAtCQ,yCAEE,4CACgB,wCAGA,6JACA,qKAGA,4HAE2B,mDAG3C,4CACgB,wCAGA,2FAGA,6GAGA,4HAE2B,mDAG3C,uCACgB,mCAGA,6GAE0B,gD,+QGhCpD,MAAMC,EAAiB,CACrB,CAAEf,KAAM,GAAIgB,UAAW,GACvB,CAAEhB,KAAM,WAAYgB,UAAW,GAC/B,CAAEhB,KAAM,OAAQgB,UAAW,EAAeC,YAAa,CAAC9G,IACxD,CAAE6F,KAAM,UAAWgB,UAAW,EAAkBC,YAAa,CAAC9G,IAE9D,CAAE6F,KAAM,KAAMkB,WAAY,KAUrB,MAAMC,G,uBAAAA,I,oDAAAA,IAAgB,SANlB,CAAC,IAAaC,QAAQL,EAAQ,CACrCM,oBAAqB,SACrBC,SAAS,KAED,OChBL,MAAMC,G,sCAAAA,I,uBAAAA,EAAY,qECPzB,eACI,wBACJ,S,kHCuCO,MAAMC,G,uBAAAA,EAAS,WAFRD,K,oDAEDC,IAAS,UAHT,GAAE,SAdJ,CACP,IACA,IACA,IACAL,EACA,IACA,IACA,IAAUC,QAAQ,CAChBK,OAAQ,CACNC,YAAa,IAAM/H,aAAaC,QAAQ,SACxC+H,eAAgB,CAACjH,OAAOC,SAASF,aCxBzC,MAAyBmH,gBAAgBJ,GACtCK,MAAMC,GAAOC,QAAQ7F,MAAM4F,K,mBCX9B,SAASE,EAAyBC,GAGjC,OAAOC,QAAQC,UAAUrC,KAAK,WAC7B,IAAInD,EAAI,IAAIyF,MAAM,uBAAyBH,EAAM,KAEjD,MADAtF,EAAE0F,KAAO,mBACH1F,IAGRqF,EAAyBM,KAAO,WAAa,MAAO,IACpDN,EAAyBG,QAAUH,EACnCO,EAAOC,QAAUR,EACjBA,EAAyBS,GAAK,S","file":"main.js","sourcesContent":["export class AuthorizationModel {\r\n    token: string;\r\n}","import { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { AuthorizationModel } from '../models/AuthorizationModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private authorization: AuthorizationModel;\n\n  constructor(private jwtHelper: JwtHelperService) { }\n\n  public getAuthentication():AuthorizationModel {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      let authorization:AuthorizationModel = {\n        token: localStorage.getItem('token') as string\n      }\n  \n      this.authorization = authorization;\n    }\n\n    return this.authorization;\n  }\n\n  public setAuthentication(authorization: AuthorizationModel) {\n    this.authorization = authorization;\n    localStorage.setItem('token', authorization.token);\n  }\n\n  public clearAuthentication() {\n    this.authorization = new AuthorizationModel();\n    localStorage.removeItem('token');\n  }\n\n  public isAuthenticated():Boolean {\n    const token = localStorage.getItem('token');\n    \n    if (token) {\n      let authorization:AuthorizationModel = {\n        token: localStorage.getItem('token') as string\n      }\n  \n      this.authorization = authorization;\n\n      return !this.jwtHelper.isTokenExpired(token);\n    }\n\n    return false;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\n\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardService implements CanActivate {\n\n  constructor(private auth:AuthService, private router:Router) { }\n\n  canActivate(): boolean {\n    if (!this.auth.isAuthenticated()) {\n        this.router.navigate(['/']);\n        return false;\n    }\n\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport { AuthService } from '../services/auth.service';\n\nimport { UserModel } from '../models/UserModel';\nimport { UserCreatedModel } from '../models/UserCreatedModel';\nimport { UserUpdatedModel } from '../models/UserUpdatedModel';\nimport { UserDeletedModel } from '../models/UserDeletedModel';\nimport { UserUpdateModel } from '../models/UserUpdateModel';\nimport { AuthorizationModel } from '../models/AuthorizationModel';\nimport { HashModel } from '../models/HashModel';\nimport { HashCreateModel } from '../models/HashCreateModel';\nimport { AvailableModel } from '../models/AvailableModel';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  host:string = `${window.location.origin}`;\n  tokenRoute:string = '/api/token';\n  userRoute:string = '/api/user';\n  availableRoute:string = '/api/user/available';\n  encryptRoute:string = '/api/encrypt/SHA256';\n\n  constructor(\n    private http: HttpClient, \n    private jwtHelper: JwtHelperService, \n    private auth:AuthService\n  ) {}\n\n  login(emailAddress:string, password:string):Promise<AuthorizationModel> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    let body = {\n      email_address: emailAddress,\n      password: password\n    }\n\n    return this.http.post<AuthorizationModel>(`${this.host}${this.tokenRoute}`, body, { headers }).toPromise();\n  }\n\n  createUser(emailAddress:string, username:string, password:string):Promise<UserCreatedModel> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    let body = {\n      email_address: emailAddress,\n      username: username,\n      password: password\n    }\n\n    return this.http.post<UserCreatedModel>(`${this.host}${this.userRoute}`, body, { headers }).toPromise();\n  }\n\n  updateUser(userUpdateModel: UserUpdateModel):Promise<UserUpdatedModel> {\n    let authorization = this.auth.getAuthentication();\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorization.token}`\n    });\n\n    let username = this.jwtHelper.decodeToken(authorization.token).username;\n\n    return this.http.patch<UserUpdatedModel>(`${this.host}${this.userRoute}/${username}`, userUpdateModel, { headers }).toPromise();\n  }\n\n  deleteUser():Promise<UserDeletedModel> {\n    let authorization = this.auth.getAuthentication();\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorization.token}`\n    });\n\n    let username = this.jwtHelper.decodeToken(authorization.token).username;\n\n    return this.http.delete<UserDeletedModel>(`${this.host}${this.userRoute}/${username}`, { headers }).toPromise();\n  }\n\n  getUser():Promise<UserModel> {\n    let authorization = this.auth.getAuthentication();\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${authorization.token}`\n    });\n\n    let username = this.jwtHelper.decodeToken(authorization.token).username;\n\n    return this.http.get<UserModel>(`${this.host}${this.userRoute}/${username}`, { headers }).toPromise();\n  }\n\n  emailAvailable(emailAddress: string):Promise<AvailableModel> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    let body = {\n      email_address: emailAddress,\n    }\n\n    return this.http.post<AvailableModel>(`${this.host}${this.availableRoute}`, body, { headers }).toPromise();\n  }\n\n  usernameAvailable(username: string):Promise<AvailableModel> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    let body = {\n      username: username,\n    }\n\n    return this.http.post<AvailableModel>(`${this.host}${this.availableRoute}`, body, { headers }).toPromise();\n  }\n\n  encrypt(hashCreateModel:HashCreateModel):Promise<HashModel> {\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http.post<HashModel>(`${this.host}${this.encryptRoute}`, hashCreateModel, { headers }).toPromise();\n  }\n\n}\n","<header>\n    <h1>2D Fighting Multiplayer Platformer</h1>\n</header>\n<section>\n    <h2>Login</h2>\n    <hr>\n    <form [formGroup]=\"form\">\n        <p class=\"error\" *ngIf=\"error\">Login failed.</p>\n        \n        <input type=\"email\" id=\"loginEmail\" autocomplete=\"email\" placeholder=\"Email...\" formControlName=\"email\">\n        <p class=\"error\" *ngIf=\"email.invalid && email?.dirty\">Email is not valid.</p>\n\n        <input type=\"password\" id=\"loginPassword\" autocomplete=\"current-password\" placeholder=\"Password...\" formControlName=\"password\">\n        <p class=\"error\" *ngIf=\"password.invalid && password?.dirty\">Password must contain 1 lowercase, 1 uppercase, 1 number and be at least 8 characters long.</p>\n\n        <input type=\"submit\" value=\"Login\" [disabled]=\"form.invalid\" (click)=\"onSubmit()\">\n    </form>\n    <hr>\n    <form>\n        <input type=\"button\" value=\"Register\" routerLink=\"/register\">\n    </form>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { ApiService } from '../../services/api.service';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  form: FormGroup;\n  error: boolean = false;\n\n  constructor(\n    private router: Router, \n    private formBuilder: FormBuilder, \n    private api: ApiService, \n    private auth: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      email: ['', [\n        Validators.required,\n        Validators.email\n      ]],\n      password: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]]\n    });\n\n    if (this.auth.isAuthenticated()) {\n      this.router.navigate(['/game']);\n    }\n  }\n\n  get email() { return this.form.get('email') as AbstractControl; }\n  get password() { return this.form.get('password') as AbstractControl; }\n\n  async onSubmit() {\n    try {\n      let auth = await this.api.login(this.email.value, this.password.value);\n\n      this.auth.setAuthentication(auth);\n      this.router.navigate(['/game']);\n    } catch(e) {\n      this.error = true;\n    }\n  }\n\n}\n","import { AbstractControl, AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\r\n\r\nimport { ApiService } from '../services/api.service';\r\n\r\nexport class CustomValidator {\r\n    static match(field: AbstractControl): ValidatorFn {\r\n        return (control: AbstractControl): {[key: string]: boolean} | null => {\r\n            return field.value !== control.value? {match: true } : null;\r\n        }\r\n    }\r\n\r\n    static emailAvailable(api: ApiService): AsyncValidatorFn {\r\n        return async (control: AbstractControl): Promise<{[key: string]: boolean} | null> => {\r\n            let available = await api.emailAvailable(control.value);\r\n    \r\n            if (!available.available) return null;\r\n            \r\n            return available.available.email_address ? null : {emailAvailable: true };\r\n        }\r\n    }\r\n\r\n    static usernameAvailable(api: ApiService): AsyncValidatorFn {\r\n        return async (control: AbstractControl): Promise<{[key: string]: boolean} | null> => {\r\n            let available = await api.usernameAvailable(control.value);\r\n    \r\n            if (!available.available) return null;\r\n            \r\n            return available.available.username ? null : {usernameAvailable: true };\r\n        }\r\n    }\r\n}","<header>\n    <h1>2D Fighting Multiplayer Platformer</h1>\n</header>\n<section>\n    <h2>Register</h2>\n    <hr>\n    <form [formGroup]=\"form\" autocomplete=\"off\">\n        <p class=\"error\" *ngIf=\"error\">Creation failed.</p>\n\n        <input type=\"email\" id=\"createEmail\" placeholder=\"Email...\" formControlName=\"email\">\n        <p class=\"error\" *ngIf=\"email.invalid && email?.dirty && email.errors?.email\">Email is not valid.</p>\n        <p class=\"error\" *ngIf=\"email.invalid && email?.dirty && email.errors?.emailAvailable\">Email already in use.</p>\n\n        <input type=\"text\" id=\"createUsername\" placeholder=\"Username...\" formControlName=\"username\">\n        <p class=\"error\" *ngIf=\"username.invalid && username?.dirty && username.errors?.minlength\">Username must contain at least 4 characters long.</p>\n        <p class=\"error\" *ngIf=\"username.invalid && username?.dirty && username.errors?.usernameAvailable\">Username already taken.</p>\n\n        <input type=\"password\" id=\"createPassword\" autocomplete=\"new-password\" placeholder=\"Password...\" formControlName=\"password\">\n        <p class=\"error\" *ngIf=\"password.invalid && password?.dirty\">Password must contain 1 lowercase, 1 uppercase, 1 number and be at least 8 characters long.</p>\n\n        <input type=\"password\" id=\"createPasswordRetype\" placeholder=\"Retype password...\" formControlName=\"passwordRetype\">\n        <p class=\"error\" *ngIf=\"passwordRetype.invalid && passwordRetype?.dirty\">Does not match.</p>\n\n        <input type=\"button\" value=\"Create Account\" [disabled]=\"form.invalid\" (click)=\"onSubmit()\">\n    </form>\n    <hr>\n    <form>\n        <input type=\"button\" value=\"Cancel\" routerLink=\"/\">\n    </form>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\nimport { ApiService } from '../../services/api.service';\nimport { CustomValidator } from '../../validators/CustomValidator';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  form: FormGroup;\n  error: boolean = false;\n\n  constructor(\n    private router: Router, \n    private formBuilder: FormBuilder, \n    private api: ApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formBuilder.group({\n      email: ['', [\n        Validators.required,\n        Validators.email\n      ], [\n        CustomValidator.emailAvailable(this.api)\n      ]],\n      username: ['', [\n        Validators.required,\n        Validators.minLength(4)\n      ], [\n        CustomValidator.usernameAvailable(this.api)\n      ]],\n      password: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]],\n      passwordRetype: ['', [\n        Validators.required\n      ]]\n    });\n\n    this.passwordRetype.setValidators([CustomValidator.match(this.password)]);\n  }\n\n  get email() { return this.form.get('email') as AbstractControl; }\n  get username() { return this.form.get('username') as AbstractControl; }\n  get password() { return this.form.get('password') as AbstractControl; }\n  get passwordRetype() { return this.form.get('passwordRetype') as AbstractControl; }\n\n  async onSubmit() {\n    try {\n      let created = await this.api.createUser(this.email.value, this.username.value, this.password.value);\n      \n      if (created.error) this.error = true;\n      else this.router.navigate(['/']);\n    } catch(e) {\n      this.error = true;\n    }\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { faBars, faPlay, faUser, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-dropmenu',\n  templateUrl: './dropmenu.component.html',\n  styleUrls: ['./dropmenu.component.css']\n})\nexport class DropmenuComponent implements OnInit {\n  faBars = faBars;\n  faPlay = faPlay;\n  faUser = faUser;\n  faSignOutAlt = faSignOutAlt;\n  isActive:Boolean = false;\n\n  constructor(private router: Router, private auth:AuthService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  setActive() {\n    let active = {\n      'is-active': this.isActive\n    }\n\n    return active;\n  }\n\n  onToggle() {\n    this.isActive = !this.isActive;\n  }\n\n  onClickLogout() {\n    this.auth.clearAuthentication();\n    this.router.navigate(['/']);\n  }\n\n}\n","<aside [ngClass]=\"setActive()\">\n    <nav>\n        <button routerLink=\"/game\"><fa-icon [icon]=\"faPlay\"></fa-icon>Play Game</button>\n        <button routerLink=\"/account\"><fa-icon [icon]=\"faUser\"></fa-icon>My Account</button>\n        <button (click)=\"onClickLogout()\"><fa-icon [icon]=\"faSignOutAlt\"></fa-icon>Logout</button>\n    </nav>\n    <button (click)=\"onToggle()\"><fa-icon [icon]=\"faBars\"></fa-icon></button>\n</aside>","import { Component, ElementRef, ViewChild, OnInit } from '@angular/core';\nimport { faExpand } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-game',\n  templateUrl: './game.component.html',\n  styleUrls: ['./game.component.css']\n})\nexport class GameComponent implements OnInit {\n  @ViewChild('display') display: ElementRef<HTMLInputElement>;\n  faExpand = faExpand;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.loadScript('../assets/game.js');\n  }\n\n  private loadScript(url: string) {\n    const body = <HTMLDivElement> document.body;\n    const script = document.createElement('script');\n\n    script.innerHTML = '';\n    script.src = url;\n    script.async = false;\n    script.defer = true;\n\n    body.appendChild(script);\n  }\n\n  onClickFullscreen() {\n    this.display.nativeElement.requestFullscreen();\n  }\n\n}\n","<app-dropmenu></app-dropmenu>\n<header>\n    <h1>2D Fighting Multiplayer Platformer</h1>\n</header>\n<section>\n    <h2>Account - {{username}}</h2>\n    <hr>\n    <form [formGroup]=\"formNewUsername\" autocomplete=\"off\">\n        <p class=\"error\" *ngIf=\"errorNewUsername\">Update failed.</p>\n        \n        <input type=\"text\" id=\"newUsername\" placeholder=\"New username...\" formControlName=\"newUsername\">\n        <p class=\"error\" *ngIf=\"newUsername.invalid && newUsername?.dirty && newUsername.errors?.minlength\">Username must contain at least 4 characters long.</p>\n        <p class=\"error\" *ngIf=\"newUsername.invalid && newUsername?.dirty && newUsername.errors?.usernameAvailable\">Username already taken.</p>\n\n        <input type=\"password\" id=\"newUsernamePassword\" placeholder=\"Password...\" formControlName=\"password\">\n        <p class=\"error\" *ngIf=\"passwordForNewUsername.invalid && passwordForNewUsername?.dirty\">Password must contain 1 lowercase, 1 uppercase, 1 number and be at least 8 characters long.</p>\n\n        <input type=\"button\" value=\"Update Username\" [disabled]=\"formNewUsername.invalid\" (click)=\"onSubmitNewUsername()\">\n    </form>\n    <hr>\n    <form [formGroup]=\"formNewPassword\" autocomplete=\"off\">\n        <p class=\"error\" *ngIf=\"errorNewPassword\">Update failed.</p>\n\n        <input type=\"password\" id=\"newPassword\" autocomplete=\"new-password\" placeholder=\"New password...\" formControlName=\"newPassword\">\n        <p class=\"error\" *ngIf=\"newPassword.invalid && newPassword?.dirty\">Password must contain 1 lowercase, 1 uppercase, 1 number and be at least 8 characters long.</p>\n        \n        <input type=\"password\" id=\"newPasswordRetype\" placeholder=\"Retype new password...\" formControlName=\"newPasswordRetype\">\n        <p class=\"error\" *ngIf=\"newPasswordRetype.invalid && newPasswordRetype?.dirty\">Does not match.</p>\n\n        <input type=\"password\" id=\"newPasswordPassword\" placeholder=\"Password...\" formControlName=\"password\">\n        <p class=\"error\" *ngIf=\"passwordForNewPassword.invalid && passwordForNewPassword?.dirty\">Password must contain 1 lowercase, 1 uppercase, 1 number and be at least 8 characters long.</p>\n\n        <input type=\"button\" value=\"Update Password\" [disabled]=\"formNewPassword.invalid\" (click)=\"onSubmitNewPassword()\">\n    </form>\n    <hr>\n    <form [formGroup]=\"formDelete\" autocomplete=\"off\">\n        <p class=\"error\" *ngIf=\"errorDelete\">Delete failed.</p>\n\n        <input type=\"password\" id=\"deletePassword\" placeholder=\"Password...\" formControlName=\"password\">\n        <p class=\"error\" *ngIf=\"passwordForDelete.invalid && passwordForDelete?.dirty\">Password must contain 1 lowercase, 1 uppercase, 1 number and be at least 8 characters long.</p>\n\n        <input type=\"button\" value=\"Delete Account\" [disabled]=\"formDelete.invalid\" (click)=\"onSubmitDelete()\">\n    </form>\n</section>","<app-dropmenu></app-dropmenu>\n<section>\n    <canvas #display>\n        Your browser does not support the HTML canvas tag.\n    </canvas>\n    <button (click)=\"onClickFullscreen()\"><fa-icon [icon]=\"faExpand\"></fa-icon>Fullscreen</button>\n</section>","import { Component, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Location } from '@angular/common';\n\nimport { ApiService } from '../../services/api.service';\nimport { AuthService } from '../../services/auth.service';\nimport { CustomValidator } from 'src/app/validators/CustomValidator';\n\n@Component({\n  selector: 'app-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.css']\n})\nexport class AccountComponent implements OnInit {\n  formNewUsername: FormGroup;\n  formNewPassword: FormGroup;\n  formDelete: FormGroup;\n  username: string;\n  errorNewUsername: boolean;\n  errorNewPassword: boolean;\n  errorDelete: boolean;\n\n  constructor(\n    private router: Router,\n    private location: Location,\n    private formBuilder: FormBuilder, \n    private api: ApiService, \n    private auth: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.formNewUsername = this.formBuilder.group({\n      newUsername: ['', [\n        Validators.required,\n        Validators.minLength(4)\n      ], [\n        CustomValidator.usernameAvailable(this.api)\n      ]],\n      password: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]]\n    });\n\n    this.formNewPassword = this.formBuilder.group({\n      password: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]],\n      newPassword: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]],\n      newPasswordRetype: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]]\n    });\n\n    this.newPasswordRetype.setValidators([CustomValidator.match(this.newPassword)]);\n\n    this.formDelete = this.formBuilder.group({\n      password: ['', [\n        Validators.required,\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/)\n      ]]\n    });\n\n    this.setUsername();\n  }\n\n  async setUsername() {\n    let user = await this.api.getUser();\n    this.username = user.username;\n  }\n  \n  get newUsername() { return this.formNewUsername.get('newUsername') as AbstractControl; }\n  get newPassword() { return this.formNewPassword.get('newPassword') as AbstractControl; }\n  get newPasswordRetype() { return this.formNewPassword.get('newPasswordRetype') as AbstractControl; }\n\n  get passwordForNewUsername() { return this.formNewUsername.get('password') as AbstractControl; }\n  get passwordForNewPassword() { return this.formNewPassword.get('password') as AbstractControl; }\n  get passwordForDelete() { return this.formDelete.get('password') as AbstractControl; }\n\n  private async validPassword(password: string): Promise<boolean> {\n    try {\n      let user = await this.api.getUser();\n      let hash = await this.api.encrypt({string: password, salt: user.password_salt});\n\n      return hash.cypher === user.password;\n    } catch(e) {\n      return false;\n    }\n  }\n\n  private async relogin(email: string, password: string) {\n    let auth = await this.api.login(email, password);\n    this.auth.setAuthentication(auth);\n  }\n\n  private refresh() {\n    this.router.navigateByUrl('/refresh', { skipLocationChange: true }).then(() => {\n      this.router.navigate([decodeURI(this.location.path())]);\n    });\n  }\n\n  async onSubmitNewUsername() {\n    let validPassword = await this.validPassword(this.passwordForNewUsername.value);\n    if (!validPassword) {\n      this.errorNewUsername = true;\n      return;\n    }\n\n    try {\n      let user = await this.api.getUser();\n      let updated = await this.api.updateUser({newUsername: this.newUsername.value});\n\n      if (!updated.error) {\n        this.relogin(user.email_address, this.passwordForNewUsername.value);\n        this.refresh();\n      } else {\n        this.errorNewUsername = true;\n      }\n    } catch(e) {\n      this.errorNewUsername = true;\n    }\n  }\n\n  async onSubmitNewPassword() {\n    let validPassword = await this.validPassword(this.passwordForNewPassword.value);\n    if (!validPassword) {\n      this.errorNewPassword = true;\n      return;\n    }\n\n    try {\n      let user = await this.api.getUser();\n      let updated = await this.api.updateUser({newPassword: this.newPassword.value});\n      \n      if (!updated.error) {\n        this.relogin(user.email_address, this.newPassword.value);\n        this.refresh();\n      } else {\n        this.errorNewPassword = true;\n      }\n    } catch(e) {\n      this.errorNewPassword = true;\n    }\n  }\n\n  async onSubmitDelete() {\n    let validPassword = await this.validPassword(this.passwordForDelete.value);\n    if (!validPassword) {\n      this.errorDelete = true;\n      return;\n    }\n\n    try {\n      let deleted = await this.api.deleteUser();\n      \n      if (!deleted.error) {\n        this.auth.clearAuthentication();\n        this.router.navigate(['/']);\n      } else {\n        this.errorDelete = true;\n      }\n    } catch(e) {\n      this.errorDelete = true;\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { GuardService } from './services/guard.service';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { GameComponent } from './components/game/game.component';\nimport { AccountComponent } from './components/account/account.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'game', component: GameComponent, canActivate: [GuardService] },\n  { path: 'account', component: AccountComponent, canActivate: [GuardService] },\n\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    onSameUrlNavigation: 'reload',\n    useHash: true\n  })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {}","<main>\n    <router-outlet></router-outlet>\n</main>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { JwtModule } from \"@auth0/angular-jwt\";\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AccountComponent } from './components/account/account.component';\nimport { DropmenuComponent } from './components/dropmenu/dropmenu.component';\nimport { GameComponent } from './components/game/game.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    AccountComponent,\n    DropmenuComponent,\n    GameComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    FontAwesomeModule,\n    HttpClientModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: () => localStorage.getItem(\"token\"),\n        allowedDomains: [window.location.host]\n      },\n    })\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}